<?xml version="1.0" encoding="utf-8"?>
<abapGit version="v1.0.0" serializer="LCL_OBJECT_CLAS" serializer_version="v1.0.0">
 <asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
  <asx:values>
   <VSEOCLASS>
    <CLSNAME>Z_UI2_JSON</CLSNAME>
    <LANGU>E</LANGU>
    <DESCRIPT>JSON converter</DESCRIPT>
    <STATE>1</STATE>
    <CLSCCINCL>X</CLSCCINCL>
    <FIXPT>X</FIXPT>
    <UNICODE>X</UNICODE>
    <WITH_UNIT_TESTS>X</WITH_UNIT_TESTS>
   </VSEOCLASS>
   <DESCRIPTIONS>
    <SEOCOMPOTX>
     <CMPNAME>BOOL</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>2 state boolean type (&apos;X&apos; - true, &apos;&apos; - false), as abap_bool</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>BOOL_TO_TRIBOOL</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Convertes 2 state bool to 3 state bool</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>CLASS_CONSTRUCTOR</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>CLASS_CONSTRUCTOR</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>CONSTRUCTOR</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>C_BOOL</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>2 value bool type (initial, X)</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>C_TRIBOOL</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>3 value bool type (initial, _, X)</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>DESERIALIZE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Serializes object</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>DESERIALIZE_INT</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Deserializes ABAP object from JSON</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>DUMP</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>OBSOLETE: use SERIALIZE instead</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>DUMP_INT</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Recursive conversion</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>DUMP_SYMBOLS</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Dump to JSON symbol table</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>DUMP_TYPE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Dumps elementary type to string</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>DUMP_TYPE_EX</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Dumps elementary type to string (no type description needed)</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>EDM_DATETIME_TO_TS</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Converts EDM DateTime into ABAP timestamp</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>ESCAPE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>OBSOLETE: Use ABAP built-in escape function instead</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>GENERATE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Generates ABAP object from JSON</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>GENERATE_INT</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Generates ABAP object from JSON</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>GENERATE_INT_EX</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Generates ABAP object from JSON</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>GENERATE_STRUCT</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Generates dynamic structure by fields</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>GET_CONVEXIT_FUNC</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Returns name of conversion exit function module</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>GET_FIELDS</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Prepares structure fields cache</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>GET_INDENT</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Returns formarted indent by level</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>GET_SYMBOLS</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Alternative impl. of CL_ABAP_STRUCTDESCR=&gt;GET_SYMBOLS_TAB</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>GET_SYMBOLS_CLASS</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Specialization of GET_SYMBOLS for classes</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>GET_SYMBOLS_STRUCT</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Specialization of GET_SYMBOLS for structures</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>IS_COMPRESSABLE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Check if initial field shall be compressed</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>JSON</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MC_BOOL_3STATE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>List of known 3state boolean types</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MC_BOOL_TYPES</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>List of known boolean types</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MC_COV_ERROR</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Result of incorrect translation</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MC_DEFAULT_INDENT</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Default indent whitespace</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MC_JSON_TYPE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Absolute name of JSON string type</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MC_KEY_SEPARATOR</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Separator inserted between parts of compound keys</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MC_ME_TYPE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>The class name</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MC_NAME_SYMBOLS_MAP</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Map of not-allowed symbols in field names</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MC_TYPEKIND_INT8</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>TYPEKIND_INT8, only from 7.40</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MC_TYPEKIND_UTCLONG</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>CL_ABAP_TYPEDESCR=&gt;TYPEKIND_UTCLONG, only from 7.54</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MT_NAME_MAPPINGS</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Fixed name pairs for JSON to ABAP attribute name mapping</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MT_NAME_MAPPINGS_EX</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Cache for JSON to ABAP field renaming</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MT_OBJ_DUMP_IDX</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Dump object index for resolving cycle references</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MT_REF_DUMP_IDX</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Dump reference index for resolving cycle references</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MT_STRUCT_CACHE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Cache for structure fields</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MT_STRUCT_TYPE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Cache for generated structure types</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_ASSOC_ARRAYS</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Serialize tables with unique keys as associative array</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_ASSOC_ARRAYS_OPT</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Optimize rendering of name value maps</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_BOOL_3STATE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>List of known 3state boolean types</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_BOOL_TYPES</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>List of known boolean types</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_COMPRESS</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Do not render initial value on serialization</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_CONVERSION_EXITS</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Use DDIC conversion exits on serialize/deserialize of values</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_EXPAND_INCLUDES</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Expand named includes in structures</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_EXTENDED</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>The class is used as based class</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_FORMAT_OUTPUT</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Indent and split in lines serialized JSON</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_HEX_AS_BASE64</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Process hex values as base64</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_INITIAL_DATE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Initial date as JSON</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_INITIAL_TIME</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Initial time as JSON</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_INITIAL_TS</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Initial timestamp as JSON</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_NUMC_AS_STRING</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Dump NUMC fields as strings</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_PRETTY_NAME</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Pretty name mode for JSON attribute names</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_STRICT_MODE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Stop further processing on error</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>MV_TS_AS_ISO8601</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Dump timestamps as string in ISO8601 format</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>NAME_MAPPING</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>ABAP&lt;-&gt;JSON Name Mapping</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>NAME_MAPPINGS</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>ABAP&lt;-&gt;JSON Name Mapping Table</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>NAME_MAPPINGS_EX</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Index table for renaming JSON fields into ABAP names</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>PRETTY_MODE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON name conversion mode</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>PRETTY_NAME</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>PrettyPrint names</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>PRETTY_NAME_EX</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>PrettyPrint names in extended form</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>PRETTY_NAME_MODE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Name conversion mode</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>RAW_TO_STRING</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Converts XSTRING to STRING</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>REF_TAB</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Public table of data references (for usage in Steampunk)</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>RESTORE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Deserialize JSON to ABAP</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>RESTORE_TYPE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Deserialize JSON to ABAP</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Serializes object</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>SERIALIZE_INT</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Serializes ABAP object to JSON</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>SO_TYPE_B</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Cache for abap_bool data type</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>SO_TYPE_F</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Cache for f data type</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>SO_TYPE_I</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Cache for i data type</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>SO_TYPE_P</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Cache for p data type</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>SO_TYPE_S</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Cache for string data type</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>SO_TYPE_T_JSON</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Cached type of table of JSON</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>SO_TYPE_T_NAME_VALUE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Cached type of table of name value pairs</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>STRING_TO_RAW</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Converts STRING to XSTRING</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>STRING_TO_XSTRING</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Converts XSTRING data to STRING</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>SV_WHITE_SPACE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>White space characters</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>TRIBOOL</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>3 state boolean type (&apos;X&apos;-true, &apos;-&apos;-false, &apos;&apos;-undefined)</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>TRIBOOL_TO_BOOL</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Convertes 3 state bool to 2 state bool</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>T_S_FIELD_CACHE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Structure field data cache</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>T_S_NAME_VALUE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Name-Value Pair structure</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>T_S_STRUCT_CACHE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Structure for RTTI for dynamic types during serialization</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>T_S_STRUCT_CACHE_RES</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Extension of T_S_STRUCT_CACHE for binding with data object</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>T_S_STRUCT_TYPE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Cache structure for data generation</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>T_S_SYMBOL</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Helper type for structure fields iteration</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>T_T_FIELD_CACHE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Table of T_S_FIELD_CACHE</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>T_T_JSON</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Table of JSON segements</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>T_T_NAME_VALUE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Table of name-value pairs</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>T_T_STRUCT_CACHE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Table of T_S_STRUCT_CACHE</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>T_T_STRUCT_TYPE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Table of T_S_STRUCT_TYPE</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>T_T_SYMBOL</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Standard table of T_S_SYMBOL</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>UNESCAPE</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Unescape JSON string</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>VERSION</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Version of the parser logic</DESCRIPT>
    </SEOCOMPOTX>
    <SEOCOMPOTX>
     <CMPNAME>XSTRING_TO_STRING</CMPNAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Converts XSTRING data to STRING</DESCRIPT>
    </SEOCOMPOTX>
   </DESCRIPTIONS>
   <DESCRIPTIONS_SUB>
    <SEOSUBCOTX>
     <CMPNAME>BOOL_TO_TRIBOOL</CMPNAME>
     <SCONAME>IV_BOOL</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>2 state boolean type (&apos;X&apos; - true, &apos;&apos; - false)</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>ASSOC_ARRAYS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Serialize tables with unique keys as associative array</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>ASSOC_ARRAYS_OPT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Optimize rendering of name value maps</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>BOOL_3STATE</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>List of known 3state boolean types</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>BOOL_TYPES</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>List of known boolean types</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>COMPRESS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Skip empty elements</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>CONVERSION_EXITS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Use DDIC conversion exits on serialize/deserialize of values</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>EXPAND_INCLUDES</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Expand named includes in structures</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>FORMAT_OUTPUT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Indent and split in lines serialized JSON</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>HEX_AS_BASE64</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Process hex values as base64</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>INITIAL_DATE</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Initial date as JSON</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>INITIAL_TIME</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Initial time as JSON</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>INITIAL_TS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Initial timestamp as JSON</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>NAME_MAPPINGS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>ABAP&lt;-&gt;JSON Name Mapping Table</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>NUMC_AS_STRING</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Serialize NUMC fields as strings</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>PRETTY_NAME</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Pretty Print property names</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>STRICT_MODE</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Stop further processing on error</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>CONSTRUCTOR</CMPNAME>
     <SCONAME>TS_AS_ISO8601</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Dump timestamps as string in ISO8601 format</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE</CMPNAME>
     <SCONAME>ASSOC_ARRAYS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Deserialize associative array as tables with unique keys</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE</CMPNAME>
     <SCONAME>ASSOC_ARRAYS_OPT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Optimize rendering of name value maps</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE</CMPNAME>
     <SCONAME>CONVERSION_EXITS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Use DDIC conversion exits on deserialize of values</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data to serialize</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE</CMPNAME>
     <SCONAME>HEX_AS_BASE64</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Serialize hex values as base64</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE</CMPNAME>
     <SCONAME>JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE</CMPNAME>
     <SCONAME>JSONX</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON XString</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE</CMPNAME>
     <SCONAME>NAME_MAPPINGS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>ABAP&lt;-&gt;JSON Name Mapping Table</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE</CMPNAME>
     <SCONAME>PRETTY_NAME</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Pretty Print property names</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE_INT</CMPNAME>
     <SCONAME>CX_SY_MOVE_CAST_ERROR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>May be fired only in case of STRICT_MODE = TRUE</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE_INT</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data to serialize</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE_INT</CMPNAME>
     <SCONAME>JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DESERIALIZE_INT</CMPNAME>
     <SCONAME>JSONX</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON XString</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP</CMPNAME>
     <SCONAME>ASSOC_ARRAYS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Serialize tables with unique keys as associative array</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP</CMPNAME>
     <SCONAME>COMPRESS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Skip empty elements</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data reference</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP</CMPNAME>
     <SCONAME>PRETTY_NAME</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Pretty Print property names</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP</CMPNAME>
     <SCONAME>R_JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP</CMPNAME>
     <SCONAME>TS_AS_ISO8601</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Dump timestamps as string in ISO8601 format</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP</CMPNAME>
     <SCONAME>TYPE_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data descriptor</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_INT</CMPNAME>
     <SCONAME>CONVEXIT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Conversion Exit Output Routine Name</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_INT</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data reference</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_INT</CMPNAME>
     <SCONAME>LEVEL</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Hierarchy level</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_INT</CMPNAME>
     <SCONAME>R_JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_INT</CMPNAME>
     <SCONAME>TYPE_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data descriptor</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_SYMBOLS</CMPNAME>
     <SCONAME>FORMAT_SCOPE</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Apply scope formatting</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_SYMBOLS</CMPNAME>
     <SCONAME>IT_SYMBOLS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Standard table of T_S_SYMBOL</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_SYMBOLS</CMPNAME>
     <SCONAME>LEVEL</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Hierarchy level</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_SYMBOLS</CMPNAME>
     <SCONAME>OPT_ARRAY</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Optimize fields</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_SYMBOLS</CMPNAME>
     <SCONAME>R_JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_TYPE</CMPNAME>
     <SCONAME>CONVEXIT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Conversion Exit Output Routine</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_TYPE</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data reference</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_TYPE</CMPNAME>
     <SCONAME>R_JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_TYPE</CMPNAME>
     <SCONAME>TYPE_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data descriptor</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_TYPE_EX</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data reference</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>DUMP_TYPE_EX</CMPNAME>
     <SCONAME>R_JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>EDM_DATETIME_TO_TS</CMPNAME>
     <SCONAME>OFFSET</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Offset in minutes (positive/negative)</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>EDM_DATETIME_TO_TS</CMPNAME>
     <SCONAME>R_DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Typekind normalized return value</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>EDM_DATETIME_TO_TS</CMPNAME>
     <SCONAME>TICKS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Seconds elapsed from 01.01.1970 00:00:00</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>EDM_DATETIME_TO_TS</CMPNAME>
     <SCONAME>TYPEKIND</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Receiving data type</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>ESCAPE</CMPNAME>
     <SCONAME>IN</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Text to escape</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>ESCAPE</CMPNAME>
     <SCONAME>OUT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Processed text</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE</CMPNAME>
     <SCONAME>JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE</CMPNAME>
     <SCONAME>NAME_MAPPINGS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>ABAP&lt;-&gt;JSON Name Mapping Table</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE_INT</CMPNAME>
     <SCONAME>CX_SY_MOVE_CAST_ERROR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Superclass for All System Exceptions</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE_INT</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Generated data</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE_INT</CMPNAME>
     <SCONAME>JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE_INT</CMPNAME>
     <SCONAME>LENGTH</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Length of the JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE_INT</CMPNAME>
     <SCONAME>OFFSET</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Offset of the JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE_INT_EX</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data to serialize</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE_INT_EX</CMPNAME>
     <SCONAME>JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE_INT_EX</CMPNAME>
     <SCONAME>LENGTH</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Length of JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE_INT_EX</CMPNAME>
     <SCONAME>OFFSET</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Offset in JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE_STRUCT</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Reference to data structure</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GENERATE_STRUCT</CMPNAME>
     <SCONAME>FIELDS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Name-value pairs</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_CONVEXIT_FUNC</CMPNAME>
     <SCONAME>ELEM_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Runtime Type Services</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_CONVEXIT_FUNC</CMPNAME>
     <SCONAME>INPUT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Return Input Routine</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_CONVEXIT_FUNC</CMPNAME>
     <SCONAME>RV_FUNC</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Name of coversion exit function module</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_FIELDS</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Structure reference</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_FIELDS</CMPNAME>
     <SCONAME>OBJECT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Object reference</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_FIELDS</CMPNAME>
     <SCONAME>RT_FIELDS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Field cache</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_FIELDS</CMPNAME>
     <SCONAME>TYPE_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Runtime Type Services</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_INDENT</CMPNAME>
     <SCONAME>INDENT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Formatted indent string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_INDENT</CMPNAME>
     <SCONAME>LEVEL</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Hierarchy level</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Structure reference</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS</CMPNAME>
     <SCONAME>INCLUDE_ALIASES</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Include alias fields</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS</CMPNAME>
     <SCONAME>OBJECT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Object reference</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS</CMPNAME>
     <SCONAME>RESULT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Standard table of T_S_SYMBOL</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS</CMPNAME>
     <SCONAME>TYPE_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Runtime Type Services</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS_CLASS</CMPNAME>
     <SCONAME>OBJECT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Object reference</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS_CLASS</CMPNAME>
     <SCONAME>RESULT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Standard table of T_S_SYMBOL</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS_CLASS</CMPNAME>
     <SCONAME>TYPE_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Runtime Type Services</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS_STRUCT</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Structure reference</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS_STRUCT</CMPNAME>
     <SCONAME>INCLUDE_ALIASES</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Include alias fields</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS_STRUCT</CMPNAME>
     <SCONAME>LEVEL</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Hierarchy level</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS_STRUCT</CMPNAME>
     <SCONAME>RESULT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Structure symbols cache</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>GET_SYMBOLS_STRUCT</CMPNAME>
     <SCONAME>TYPE_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Runtime Type Services</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>IS_COMPRESSABLE</CMPNAME>
     <SCONAME>NAME</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Fielld name</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>IS_COMPRESSABLE</CMPNAME>
     <SCONAME>RV_COMPRESS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Initial value shall be compressed</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>IS_COMPRESSABLE</CMPNAME>
     <SCONAME>TYPE_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Value type</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>PRETTY_NAME</CMPNAME>
     <SCONAME>IN</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Text to pretty print (ABAP name)</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>PRETTY_NAME</CMPNAME>
     <SCONAME>OUT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Processed (JSON name)</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>PRETTY_NAME_EX</CMPNAME>
     <SCONAME>IN</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Text to pretty print (ABAP name)</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>PRETTY_NAME_EX</CMPNAME>
     <SCONAME>OUT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Processed (JSON name)</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RAW_TO_STRING</CMPNAME>
     <SCONAME>IV_ENCODING</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Encoding for conversion</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RAW_TO_STRING</CMPNAME>
     <SCONAME>IV_XSTRING</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Input XString</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RAW_TO_STRING</CMPNAME>
     <SCONAME>RV_STRING</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Coverted String</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE</CMPNAME>
     <SCONAME>CX_SY_MOVE_CAST_ERROR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Superclass for All System Exceptions</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data to serialize</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE</CMPNAME>
     <SCONAME>FIELD_CACHE</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Field Cache</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE</CMPNAME>
     <SCONAME>JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE</CMPNAME>
     <SCONAME>LENGTH</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Length of JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE</CMPNAME>
     <SCONAME>OFFSET</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Ofsset in JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE</CMPNAME>
     <SCONAME>TYPE_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Runtime Type Services</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE_TYPE</CMPNAME>
     <SCONAME>CONVEXIT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Conversion Exit Input Routine</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE_TYPE</CMPNAME>
     <SCONAME>CX_SY_MOVE_CAST_ERROR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Superclass for All System Exceptions</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE_TYPE</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data to serialize</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE_TYPE</CMPNAME>
     <SCONAME>FIELD_CACHE</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Field Cache</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE_TYPE</CMPNAME>
     <SCONAME>JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE_TYPE</CMPNAME>
     <SCONAME>LENGTH</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Length of JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE_TYPE</CMPNAME>
     <SCONAME>OFFSET</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Offset in JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>RESTORE_TYPE</CMPNAME>
     <SCONAME>TYPE_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Runtime Type Services</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>ASSOC_ARRAYS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Serialize tables with unique keys as associative array</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>ASSOC_ARRAYS_OPT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Optimize rendering of name value maps</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>COMPRESS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Skip empty elements</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>CONVERSION_EXITS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Use DDIC conversion exits on serialize of values</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data to serialize</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>EXPAND_INCLUDES</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Expand named includes in structures</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>FORMAT_OUTPUT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Indent and split in lines serialized JSON</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>HEX_AS_BASE64</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Serialize hex values as base64</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>NAME</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Object name</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>NAME_MAPPINGS</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>ABAP&lt;-&gt;JSON Name Mapping Table</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>NUMC_AS_STRING</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Serialize NUMC fields as strings</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>PRETTY_NAME</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Pretty Print property names</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>R_JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>TS_AS_ISO8601</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Dump timestamps as string in ISO8601 format</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE</CMPNAME>
     <SCONAME>TYPE_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data descriptor</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE_INT</CMPNAME>
     <SCONAME>DATA</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data to serialize</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE_INT</CMPNAME>
     <SCONAME>NAME</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Object name</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE_INT</CMPNAME>
     <SCONAME>R_JSON</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>JSON string</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>SERIALIZE_INT</CMPNAME>
     <SCONAME>TYPE_DESCR</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Data descriptor</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>STRING_TO_RAW</CMPNAME>
     <SCONAME>IV_ENCODING</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Encoding for conversion</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>STRING_TO_RAW</CMPNAME>
     <SCONAME>IV_STRING</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Input data as STRING</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>STRING_TO_RAW</CMPNAME>
     <SCONAME>RV_XSTRING</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>Converted XString</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>STRING_TO_XSTRING</CMPNAME>
     <SCONAME>IN</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>String to convert to Xstring</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>STRING_TO_XSTRING</CMPNAME>
     <SCONAME>OUT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>XString data</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>TRIBOOL_TO_BOOL</CMPNAME>
     <SCONAME>IV_TRIBOOL</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>3 state boolean type (&apos;X&apos;-true, &apos;-&apos;-false, &apos;&apos;-undefined)</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>TRIBOOL_TO_BOOL</CMPNAME>
     <SCONAME>RV_BOOL</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>2 state boolean type (&apos;X&apos; - true, &apos;&apos; - false)</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>UNESCAPE</CMPNAME>
     <SCONAME>OFFSET</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>String offset for starting unescape</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>XSTRING_TO_STRING</CMPNAME>
     <SCONAME>IN</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>XString to convert</DESCRIPT>
    </SEOSUBCOTX>
    <SEOSUBCOTX>
     <CMPNAME>XSTRING_TO_STRING</CMPNAME>
     <SCONAME>OUT</SCONAME>
     <LANGU>E</LANGU>
     <DESCRIPT>String data</DESCRIPT>
    </SEOSUBCOTX>
   </DESCRIPTIONS_SUB>
  </asx:values>
 </asx:abap>
</abapGit>
